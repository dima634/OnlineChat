
@inject WebApiClient Api
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IMatToaster Toaster
@inject InstantMessager InstantMessager

<MatNavMenu>
    <AuthorizeView>
        <Authorized>
            <MatButton Class="outline-none" Icon="add" Outlined="true" OnClick="() => _isDialogOpen = true">Add chat</MatButton>
            <MatDivider></MatDivider>

            <MatHeadline6 Class="mb-0 ml-3">Direct</MatHeadline6>
            <MatList>
                @foreach (var chat in _chats.OfType<DirectChatInfo>())
                {
                    <MatListItem OnClick="() => NavigateToChat(chat.Id)">@(chat.Members.FirstOrDefault(username => username != (AuthProvider as AuthStateProvider).Username) ?? "Me")</MatListItem>
                }
            </MatList>

            <MatDivider></MatDivider>

            <MatHeadline6 Class="mb-0 ml-3">Groups</MatHeadline6>
            <MatList>
                @foreach (var group in _chats.OfType<GroupChatInfo>())
                {
                    <MatListItem OnClick="() => NavigateToChat(group.Id)">@(group.Name)</MatListItem>
                }
            </MatList>
        </Authorized>
    </AuthorizeView>
</MatNavMenu>

<MatDialog IsOpen="_isDialogOpen">
    <EditForm Model="@(_chatType == ChatType.Direct ? (object)_createDirectChatModel : _createGroupModel)"
              OnValidSubmit="Submit">
        <DataAnnotationsValidator/>
        <MatDialogTitle>Add chat</MatDialogTitle>
        <MatDialogContent>
            <div class="d-flex">
                <MatSelectItem Class="m-1"
                               Items="new ChatType[] { ChatType.Direct, ChatType.Group }"
                               @bind-Value="_chatType"
                               Outlined="true"
                               Label="Chat type"></MatSelectItem>
                @if (_chatType == ChatType.Group)
                {
                    <MatStringField @bind-Value="_createGroupModel.Name"
                                    PlaceHolder="Enter group name..."
                                    Label="Group name"
                                    Outlined="true"
                                    Class="m-1"></MatStringField>
                }
                else if (_chatType == ChatType.Direct)
                {
                    <AutoCompleteList Class="m-1"
                                      Label="Start chat with"
                                      @bind-Value="_createDirectChatModel.WithUser"
                                      T="string"
                                      SuggestionsOnInput="async (input) => await Api.GetUsernamesStartsWithAsync(input)"></AutoCompleteList>
                }
            </div>

            @if (_chatType == ChatType.Group)
            {
                <MatDivider></MatDivider>

                <div class="d-flex align-items-center">
                    <AutoCompleteList Class="m-1"
                                      Label="Username"
                                      @bind-Value="_username"
                                      T="string"
                                      SuggestionsOnInput="async (input) => await Api.GetUsernamesStartsWithAsync(input)"></AutoCompleteList>
                    <MatButton Raised="true" Type="button" OnClick="AddMember">Add</MatButton>
                </div>

                <div class="member-container">
                    <MatChip Class="bg-success text-white" Label="@((AuthProvider as AuthStateProvider).Username)"/>
                    @foreach (var member in _createGroupModel.Members)
                    {
                        <MatChip @onclick="() => _createGroupModel.Members.Remove(member)" Label="@member"/>
                    }
                </div>
            }

            <ValidationSummary/>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="() => _isDialogOpen = false">Cancel</MatButton>
            <MatButton Type="submit">Create</MatButton>
        </MatDialogActions>
    </EditForm>
</MatDialog>

@code {
    private List<ChatInfo> _chats = new List<ChatInfo>();
    private bool _isDialogOpen = false;
    private CreateGroupModel _createGroupModel = new CreateGroupModel();
    private CreateDirectChatModel _createDirectChatModel = new CreateDirectChatModel();
    private ChatType _chatType = ChatType.Direct;
    private string _username;

    protected override async Task OnInitializedAsync()
    {
        await InstantMessager.GoOnline();

        InstantMessager.ChatCreated += (sender, args) =>
        {
            _chats.Add(args.ChatInfo);
            StateHasChanged();
        };

        _chats.AddRange(await Api.GetChatsAsync());
    }

    private void NavigateToChat(int chatId)
        => Navigation.NavigateTo($"chat/{chatId}");

    private async Task Submit()
    {
        var task = _chatType switch
        {
            ChatType.Direct => CreateDirect(),
            ChatType.Group => CreateGroup()
        };

        await task;
    }

    private async Task CreateGroup()
    {
        var result = await Api.CreateGroupChat(_createGroupModel);

        if (result.IsSuccessStatusCode) Toaster.Add("Chat created", MatToastType.Success);
        else Toaster.Add("Error occured while creating chat", MatToastType.Danger);

        _isDialogOpen = false;
    }

    private async Task CreateDirect()
    {
        var result = await Api.CreateDirectChat(_createDirectChatModel);

        if (result.IsSuccessStatusCode) Toaster.Add("Chat created", MatToastType.Success);
        else Toaster.Add("Error occured while creating chat", MatToastType.Danger);

        _isDialogOpen = false;
    }

    private void OnAddMemberClick()
    {
        if (!_createGroupModel.Members.Contains(_username))
        {
            _createGroupModel.Members.Add(_username);
        }
    }

    private void AddMember()
    {
        if(_username != null && !_createGroupModel.Members.Contains(_username))
        {
            _createGroupModel.Members.Add(_username);
        }
    }
}